@using Models.DTO;
@using CQRSMediatR.Authors.Query
@using CQRSMediatR.Authors.Command 

@page "/authors"

<h1>List of Authors</h1>
<button class="btn btn-success" data-toggle="button" aria-pressed="false" @onclick="() => CreateAuthor()">Dodaj</button>
<br />
<div class="mb-2 w-100">
    <table class="table w-100">
        <thead>
            <tr>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Średnia ocen</th>
                <th>Ilość ocen</th>
                <th>Książki</th>
                <th>Akcje</th>
            </tr>
        </thead>
        @if (listOfAuthors.Count > 0)
        {
            <tbody>
                @foreach (var author in listOfAuthors)
                {
                    <tr>
                        <td>@author.FirstName</td>
                        <td>@author.SecondName</td>
                        <td>@author.AverageRate</td>
                        <td>@author.RatesCount</td>
                        <td>@string.Join(", ", author.Books.Select(x => x.Title).ToArray());</td>
                        <td>
                            <button type="button" class="btn btn-secondary oi oi-cog" @onclick="() => ModifyAuthor(author)"></button>
                            <button type="button" class="btn btn-secondary oi oi-bookmark" @onclick="() => AddRate(author)"></button>
                            <button type="button" class="btn btn-secondary oi oi-trash" @onclick="() => ConfirmDelete(author)"></button>
                        </td>
                    </tr>
                }
            </tbody>
        }
    </table>
</div>


@code {
    private List<AuthorDto> listOfAuthors;
    private PaginationDto paginationDto = new PaginationDto (0,10);

    [CascadingParameter]
    public IModalService Modal { get; set; }


    protected override async Task OnInitializedAsync()
    {
        await LoadDataAsync();
    }

    protected async Task LoadDataAsync()
    {
        listOfAuthors = new List<AuthorDto>();
        listOfAuthors = await _mediator.Send(new GetAllAuthorsQuery() { page = 0, count = 10 });
        StateHasChanged();
    }

    #region DELETE MODAL

    public async Task ConfirmDelete(AuthorDto author)
    {
        var modalParams = new ModalParameters();

        string message = String.Format("Jesteś pewny że chcesz usunąć - {0} {1}?", author.FirstName, author.SecondName);

        modalParams.Add("Message", message);

        var modalOptions = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            HideHeader = false,
            Animation = ModalAnimation.FadeInOut(1),
        };

        var modalShow = Modal.Show<ConfirmModal>("Usuń autora", modalParams, modalOptions);

        var result = await modalShow.Result;

        if (!result.Cancelled && result.Data == "OK")
        {
            await AcceptDelete_Closed(author);
        }
    }

    public async Task AcceptDelete_Closed(AuthorDto author)
    {
        var result = await _mediator.Send(new DeleteAuthorCommand()
        {
            Id = author.Id
        });
        if (result)
        {
            await LoadDataAsync();
        }
    }
    #endregion

    public async Task CreateAuthor()
    {
        var modalParams = new ModalParameters();
        var modalOptions = new ModalOptions()
        {
            HideCloseButton = true,
            DisableBackgroundCancel = true,
            HideHeader = false,
            Animation = ModalAnimation.FadeInOut(1),
        };

        var modalShow = Modal.Show<ManageAuthorModal>("Utwórz autora", modalParams, modalOptions);
        var result = await modalShow.Result;

        if (!result.Cancelled)
        {
            await LoadDataAsync();
        }
    }

    public async Task ModifyAuthor(AuthorDto author)
    {
        var modalParams = new ModalParameters();

        modalParams.Add("editedAuthor", author);

        var modalOptions = new ModalOptions()
        {
            HideCloseButton = false,
            DisableBackgroundCancel = true,
            HideHeader = false,
            Animation = ModalAnimation.FadeInOut(1),
        };

        var modalShow = Modal.Show<ManageAuthorModal>("Edytuj autora", modalParams, modalOptions);
        var result = await modalShow.Result;

        if (!result.Cancelled)
        {
            await LoadDataAsync();
        }
    }

    public async Task AddRate(AuthorDto author)
    {
        var modalParams = new ModalParameters();

        modalParams.Add("inputId", author.Id);
        modalParams.Add("type", "author");

        var modalOptions = new ModalOptions()
        {
            HideCloseButton = false,
            DisableBackgroundCancel = true,
            HideHeader = false,
            Animation = ModalAnimation.FadeInOut(1),
        };

        var modalShow = Modal.Show<AddRateModal>("Dodaj ocenę", modalParams, modalOptions);
        var result = await modalShow.Result;

        if (!result.Cancelled)
        {
            await LoadDataAsync();
        }
    }


}
