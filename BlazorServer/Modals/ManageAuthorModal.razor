@using CQRSMediatR.Authors.Command
@using CQRSMediatR.Books.Query

<div class="simple-form">
    <div class="form-group">
        <label for="Name">Imię</label>
        <input type="text" class="form-control" id="authorName" @bind-value="@_InputAuthorName">
    </div>
    <div class="form-group">
        <label for="Surname">Nazwisko</label>
        <input type="text" class="form-control" id="authorSurname" @bind-value="@_InputSurName">
    </div>
    <div class="form-group">
        <label for="CV">CV</label>
        <input type="text" class="form-control" id="authorCV" @bind-value="@_InputCV">
    </div>
    
    <div class="form-group">
        <label for="selectCategory">Książka</label>
        <select class="form-control" id="selectCategory" @bind="_InputBookId">
            <option value="@_InputBookId">@_InputBookTitle</option>
            @foreach (var template in BookList)
            {
                <option value=@template.Id>@template.Title</option>
            }
        </select>
    </div>


    <button type="submit" class="btn btn-success" @onclick="ConfirmChanges">Submit</button>

</div>


@code {

    [CascadingParameter]
    BlazoredModalInstance ModalInstance { get; set; }

    [Parameter]
    public AuthorDto editedAuthor { get; set; }

    [Parameter]
    public string Message { get; set; }

    private string _InputAuthorName { get; set; } = "";
    private string _InputSurName { get; set; } = "";
    private string _InputCV { get; set; } = "";

    private int _InputBookId;
    private string _InputBookTitle { get; set; } = "";

    private List<BookDto> BookList = new List<BookDto>();

    protected async override void OnInitialized()
    {
        if(editedAuthor != null)
        {
            _InputAuthorName = editedAuthor.FirstName;
            _InputSurName = editedAuthor.SecondName;
            _InputCV = editedAuthor.CV;
            _InputBookTitle = editedAuthor.Books.FirstOrDefault().Title;
            _InputBookId = editedAuthor.Books.FirstOrDefault().Id;

        }
        BookList = await _mediator.Send(new GetAllBooksQuery()
        {
            page = 0,
            count = 100,
        });
    }

    public void Ok()
    {
        ModalInstance.CloseAsync(ModalResult.Ok("OK"));
    }

    public void Cancel()
    {
        ModalInstance.CancelAsync();
    }

    private async Task ConfirmChanges()
    {
        if (editedAuthor != null)
        {
            await ModifyAuthor();
        }
        else
        {
            await CreateAuthor();
        }
    }

    private async Task CreateAuthor()
    {
        var findBook = _mediator.Send(new GetBookQuery()
        {
            id = _InputBookId
        });

        List<BookVM> books = new List<BookVM>();

        books.Add(new BookVM { Id = _InputBookId, Title = _InputBookTitle});

        AuthorDto newAuthor = new AuthorDto()
        {
            FirstName = _InputAuthorName,
            SecondName = _InputSurName,
            CV = _InputCV,
            Books = books,
        };


        var result = await _mediator.Send(new CreateAuthorCommand()
        {
            newAuthor = newAuthor,
        });

        if(result != null)
        {
            await ModalInstance.CloseAsync(ModalResult.Ok("OK"));
        }
    }

    private async Task ModifyAuthor()
    {
        var result = await _mediator.Send(new EditAuthorCommand()
        {
            AuthorId = editedAuthor.Id,
            Name = _InputAuthorName,
            SurName = _InputSurName,
            CV = _InputCV,
            BookId = _InputBookId

        }) ;

        if (result == true)
        {
            await ModalInstance.CloseAsync(ModalResult.Ok("OK"));
        }
    }
}
